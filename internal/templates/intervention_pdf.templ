package templates

import (
	"strconv"
	"github.com/troptropcontent/qr_code_maintenance/internal/models"
)

templ InterventionReport(intervention *models.Intervention) {
	<!DOCTYPE html>
	<html lang="fr">
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>Rapport d'Intervention - { intervention.Portal.Name }</title>
		<link rel="stylesheet" href="/static/css/output.css"/>
		<style>
			@media print {
				body { print-color-adjust: exact; }
				.footer {
					position: fixed;
					bottom: 0;
					left: 0;
					right: 0;
					background: white;
					padding: 1rem 2rem;
				}
				.content {
					padding-bottom: 4rem;
				}
			}
			@media screen {
				html, body {
					height: 100%;
				}
				.page-container {
					min-height: 100vh;
					display: flex;
					flex-direction: column;
				}
				.content {
					flex: 1;
				}
				.footer {
					margin-top: auto;
				}
			}
		</style>
	</head>
	<body class="font-sans text-gray-800 bg-white p-8 max-w-4xl mx-auto">
		<div class="page-container">
			<div class="content">
				<div class="text-center mb-8 pb-6 border-b-2 border-blue-600 break-after-avoid">
					<h1 class="text-2xl font-bold text-blue-600 mb-2">Rapport d'Intervention</h1>
					<p class="text-gray-600">Portail: { intervention.Portal.Name }</p>
				</div>

				<div class="mb-8 break-inside-avoid">
					<h2 class="text-lg font-bold text-gray-700 mb-4 pb-2 border-b border-gray-200">Informations générales</h2>
					<div class="grid grid-cols-2 gap-6">
						<div>
							<div class="text-xs font-bold text-gray-500 uppercase tracking-wide">Date d'intervention</div>
							<div class="text-sm text-gray-900 mt-1">{ intervention.Date.Format("02/01/2006") }</div>
						</div>
						<div>
							<div class="text-xs font-bold text-gray-500 uppercase tracking-wide">Intervenant</div>
							<div class="text-sm text-gray-900 mt-1">{ intervention.UserName }</div>
						</div>
						<div>
							<div class="text-xs font-bold text-gray-500 uppercase tracking-wide">Adresse</div>
							<div class="text-sm text-gray-900 mt-1">
								{ intervention.Portal.AddressStreet }<br/>
								{ intervention.Portal.AddressZipcode } { intervention.Portal.AddressCity }
							</div>
						</div>
						<div>
							<div class="text-xs font-bold text-gray-500 uppercase tracking-wide">Entreprise</div>
							<div class="text-sm text-gray-900 mt-1">{ intervention.Portal.ContractorCompany }</div>
						</div>
					</div>
				</div>

				if intervention.Summary != nil && *intervention.Summary != "" {
					<div class="mb-8 break-inside-avoid">
						<h2 class="text-lg font-bold text-gray-700 mb-4 pb-2 border-b border-gray-200">Résumé de l'intervention</h2>
						<div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
							<p class="text-sm text-gray-800">{ *intervention.Summary }</p>
						</div>
					</div>
				}

				<div class="mb-8 break-inside-avoid">
					<h2 class="text-lg font-bold text-gray-700 mb-4 pb-2 border-b border-gray-200">Tableau des contrôles</h2>
					<div class="overflow-x-auto">
						<table class="w-full border-collapse border border-gray-300 text-xs">
							<thead>
								<tr class="bg-gray-100">
									<th class="border border-gray-300 px-2 py-2 text-left font-bold" colspan="2">Sécurité</th>
									<th class="border border-gray-300 px-2 py-2 text-left font-bold" colspan="2">Autres</th>
								</tr>
								<tr class="bg-gray-50">
									<th class="border border-gray-300 px-2 py-1 text-left font-medium">Contrôle</th>
									<th class="border border-gray-300 px-2 py-1 text-center font-medium w-20">Résultat</th>
									<th class="border border-gray-300 px-2 py-1 text-left font-medium">Contrôle</th>
									<th class="border border-gray-300 px-2 py-1 text-center font-medium w-20">Résultat</th>
								</tr>
							</thead>
							<tbody>
								for i, securityControl := range models.ControlTypesByKind[models.ControlKindSecurity] {
									<tr>
										<td class="border border-gray-300 px-2 py-1">{ GetControlTypeLabel(securityControl) }</td>
										<td class="border border-gray-300 px-2 py-1 text-center">
											{ getControlResult(intervention.Controls, securityControl) }
										</td>
										if i < len(models.ControlTypesByKind[models.ControlKindOther]) {
											<td class="border border-gray-300 px-2 py-1">{ GetControlTypeLabel(models.ControlTypesByKind[models.ControlKindOther][i]) }</td>
											<td class="border border-gray-300 px-2 py-1 text-center">
												{ getControlResult(intervention.Controls, models.ControlTypesByKind[models.ControlKindOther][i]) }
											</td>
										} else {
											<td class="border border-gray-300 px-2 py-1"></td>
											<td class="border border-gray-300 px-2 py-1 text-center"></td>
										}
									</tr>
								}
								// Handle remaining "other" controls if there are more than security controls
								if len(models.ControlTypesByKind[models.ControlKindOther]) > len(models.ControlTypesByKind[models.ControlKindSecurity]) {
									for i := len(models.ControlTypesByKind[models.ControlKindSecurity]); i < len(models.ControlTypesByKind[models.ControlKindOther]); i++ {
										<tr>
											<td class="border border-gray-300 px-2 py-1"></td>
											<td class="border border-gray-300 px-2 py-1 text-center"></td>
											<td class="border border-gray-300 px-2 py-1">{ GetControlTypeLabel(models.ControlTypesByKind[models.ControlKindOther][i]) }</td>
											<td class="border border-gray-300 px-2 py-1 text-center">
												{ getControlResult(intervention.Controls, models.ControlTypesByKind[models.ControlKindOther][i]) }
											</td>
										</tr>
									}
								}
							</tbody>
						</table>
					</div>
					<div class="mt-2 text-xs text-gray-600">
						<strong>Légende:</strong> OK = Conforme, D = Défaillant, NC = Non Contrôlé
					</div>
				</div>
			</div>

			<div class="footer mt-12 pt-6 border-t border-gray-200 text-center text-xs text-gray-500 break-before-avoid">
				Rapport généré le { intervention.CreatedAt.Format("02/01/2006 à 15:04") } - 
				Référence: #{ strconv.Itoa(int(intervention.ID)) }
			</div>
		</div>
	</body>
	</html>
}

func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}

func getControlResult(controls []models.Control, controlKind string) string {
	for _, control := range controls {
		if control.Kind == controlKind {
			if control.Result != nil {
				if *control.Result {
					return "OK"
				} else {
					return "D"
				}
			}
			return "NC"
		}
	}
	return "NC"
}